#include <ros/ros.h>
#include <sensor_msgs/Imu.h>
#include <iostream>
#include <serial/serial.h>
#include <tf/transform_datatypes.h>
#include <string>
#include <tf2/LinearMath/Quaternion.h>

serial::Serial serial_;                   //创建一个串口对象serial_
uint8_t header_;                          //创建一个header_来搜素标识符
uint8_t buffer_[1024];                    //创建一个数组buffer_
sensor_msgs::Imu imu_data_;               

const uint8_t header = 0x68;              //设置标识符0x68

const double deg2rad = 0.01745329251994325;  //双浮点常量度转弧度值

const double g = 9.8015;                     //双浮点常量重力加速度


double decode_angle(uint8_t data[3])         //处理
{
    double retVal;
    if ((data[0] >> 4) == 0)
    {
        retVal = (data[0] & 0x0F) * 100 + ((data[1] >> 4) & 0x0F) * 10 + (data[1] & 0x0F) * 1 + ((data[2] >> 4) & 0x0F) * 0.1 + (data[2] & 0x0F) * 0.01;
    }
    else
    {
        retVal = -((data[0] & 0x0F) * 100 + ((data[1] >> 4) & 0x0F) * 10 + (data[1] & 0x0F) * 1 + ((data[2] >> 4) & 0x0F) * 0.1 + (data[2] & 0x0F) * 0.01);
    }

    return retVal * deg2rad;
}

double decode_acc(uint8_t data[3])              //处理x，y，z方向加速度函数
{
    double retVal;
    //ROS_INFO("acc data: %#x %#x %#x", data[0], data[1], data[2]);
    if ((data[0] >> 4) == 0)
    {
        retVal = ((data[1] >> 4) & 0x0F) * 1 + (data[1] & 0x0F) * 0.1 + ((data[2] >> 4) & 0x0F) * 0.01 + (data[2] & 0x0F) * 0.001;
    }
    else
    {
        retVal = -(((data[1] >> 4) & 0x0F) * 1 + (data[1] & 0x0F) * 0.1 + ((data[2] >> 4) & 0x0F) * 0.01 + (data[2] & 0x0F) * 0.001);
    }
    ROS_INFO("decoded acc:  %f", retVal);
    return retVal * g;
}

uint8_t check_sum(uint8_t data[30])
{
    uint8_t sum = 0;
    for (size_t i = 0; i < 30; i++)
    {
        sum += data[i];
    }

    return sum;
}


int main(int argc, char **argv)
{
    ros::init(argc, argv, "serial_node");      //ROS初始化，创建一个serial_node的节点
    ros::NodeHandle nh;                        //创建句柄
    ros::Publisher imu_pub = nh.advertise<sensor_msgs::Imu>("imu", 1000); //这里发布的消息类型利用sensor_msgs包中的Imu消息类型，并设置话题名称为imu

    serial_.setPort("/dev/ttyUSB0");           //设置串口名称、波特率等
    serial_.setBaudrate(115200);
    serial::Timeout timeout = serial::Timeout::simpleTimeout(1000);
    serial_.setTimeout(timeout);

    memset(buffer_, 0, 1024);                  //初始化buffer_数组

    try                                        //打开串口
    {
        serial_.open();
    }
    catch (serial::IOException &e)             //
    {
        ROS_ERROR_STREAM("Unable to open serial port!");
        return -1;
    }

    if (serial_.isOpen())                      //检查串口是否被打开
    {
        ROS_INFO_STREAM("Serial port opened.");
    }
    else
    {
        return -1;
    }

    ros::Rate loop_rate(50);                   //以50Hz循环

    while (ros::ok())
    {
        if (serial_.available())               //判断是否从串口中获得数据
        {
            serial_.read(&header_, 1);         //读取一个字节存入header_中
        }
        else
        {
            continue;
        }

        if (header != header_)                //判断header_是否与标识符相等
        {
            ROS_INFO("header is not 0x68");
            continue;
        }
        else
        {
            // ROS_INFO("read data");
            serial_.read(buffer_, 31);        //读取之后的31个字节存入buffer_中
        }

        if (0x1F != buffer_[0] || 0x00 != buffer_[1] || 0x84 != buffer_[2])
        {
            continue;
            ROS_WARN("data_length, address, command are wrong!");
        }
        if (buffer_[30] != check_sum(buffer_))
        {
            continue;
        }

        //进行数据处理
        double roll = 0;
        double pitch = 0;
        double yaw = 0;
        //处理RPY角
        roll = decode_angle(&buffer_[3]);
        pitch = decode_angle(&buffer_[6]);
        yaw = decode_angle(&buffer_[9]);

        tf::Quaternion quaternion;                       //创建quaternion
        quaternion.setRPY(roll, pitch, yaw);
        imu_data_.orientation.w = quaternion.getW();
        imu_data_.orientation.x = quaternion.getX();
        imu_data_.orientation.y = quaternion.getY();
        imu_data_.orientation.z = quaternion.getZ();

        //处理x，y，z加速度
        imu_data_.linear_acceleration.x = decode_acc(&buffer_[12]);
        imu_data_.linear_acceleration.y = decode_acc(&buffer_[15]);
        imu_data_.linear_acceleration.z = decode_acc(&buffer_[18]);

        //处理
        imu_data_.angular_velocity.x = decode_angle(&buffer_[21]);
        imu_data_.angular_velocity.y = decode_angle(&buffer_[24]);
        imu_data_.angular_velocity.z = decode_angle(&buffer_[27]);

        imu_pub.publish(imu_data_);            //发布消息

        loop_rate.sleep();
    }
}
